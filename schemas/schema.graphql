enum Level {
  Basic
  intermediate
  Advanced
}

enum AcademicTitle {
  Tecnologic
  Master
}

type Query {
  getCourses: [Course]
  getCourse(_id: ID!): [Course]

  getUsers: [User]
  getUser(_id: ID!): [User]
}

type Mutation {
  createCourse(input: CourseInput!): [Course]
  updateCourse(_id: ID!, input: EditCourseInput): [Course]
  deleteCourse(_id: ID!): [Course]

  createUser(input: UserInput!): [User]
  updateUser(_id: ID!, input: EditUserInput): [User]
  deleteUser(_id: ID!): [User]
}

input CourseInput {
  title: String
  professor: String
  description: String
  topic: String
  level: Level
}

input EditCourseInput {
  title: String
  professor: String
  description: String
  topic: String
  participants: [ID]
  level: Level
}

input UserInput {
  name: String
  lastname: String
  age: String
  email: String
  profile_pic: String
  password: String
  role: String
  title: AcademicTitle
}

input EditUserInput {
  name: String
  lastname: String
  age: String
  email: String
  profile_pic: String
  password: String
  title: AcademicTitle
}

type Course {
  _id: ID!
  title: String
  professor: Professor
  description: String
  topic: String
  participants: [User]
  level: Level
}

interface User {
  _id: ID!
  name: String
  lastname: String
  email: String
  profile_pic: String
  password: String
  role: String
}

type Student implements User {
  # _id: ID!
  # name: String
  # lastname: String
  # age: String
  # email: String
  # profile_pic: String
  # password: String
  # role: String
  test: String
}

type Professor implements User {
  # _id: ID!
  # name: String
  # lastname: String
  # age: String
  # email: String
  # profile_pic: String
  # password: String
  # role: String
  academicTitle: AcademicTitle
}
